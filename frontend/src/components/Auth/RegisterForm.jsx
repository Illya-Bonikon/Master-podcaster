import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import styles from './RegisterForm.module.css';
import common from '../common.module.css';
import { useNavigate } from 'react-router-dom';
import { registerAPI } from '../../api';

const RegisterForm = ({ onSubmit }) => {
	const navigate = useNavigate();
	const { register, handleSubmit, watch, formState: { errors } } = useForm();
	const password = watch('password');
	const [showPassword, setShowPassword] = useState(false);
	const [showConfirm, setShowConfirm] = useState(false);

	const handleRegister = async data => {
		try {
			const restructureData = {
				email: data.email,
				password: data.password,
				displayName: data.name
			}
			console.log(restructureData);
			await registerAPI(restructureData);
			alert('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä —É–≤—ñ–π–¥—ñ—Ç—å.');
			navigate('/login');
		} catch (e) {
			alert('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ' + (e.response?.data?.message || e.message));
		}
	};

	return (
		<form className={common.form} onSubmit={handleSubmit(handleRegister)}>
			<h2 className={common.title}>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h2>

			<div className={common.field}>
				<label htmlFor="name">–Ü–º'—è</label>
				<input id="name" type="text" {...register('name', { required: '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è' })} />
				{errors.name && <span className={common.error}>{errors.name.message}</span>}
			</div>

			<div className={common.field}>
				<label htmlFor="email">Email</label>
				<input id="email" type="email" {...register('email', { required: '–í–≤–µ–¥—ñ—Ç—å email' })} />
				{errors.email && <span className={common.error}>{errors.email.message}</span>}
			</div>

			<div className={common.field}>
				<label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
				<div className={styles.inputWrapper}>
					<input
						id="password"
						type={showPassword ? 'text' : 'password'}
						{...register('password', { required: '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å', minLength: { value: 6, message: '–ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤' } })}
					/>
					<button
						type="button"
						onClick={() => setShowPassword(v => !v)}
						className={styles.eyeButton}
						aria-label={showPassword ? '–°—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å' : '–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å'}
					>
						{showPassword ? 'üôà' : 'üëÅÔ∏è'}
					</button>
				</div>
				{errors.password && <span className={common.error}>{errors.password.message}</span>}
			</div>

			<div className={common.field}>
				<label htmlFor="confirm">–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å</label>
				<div className={styles.inputWrapper}>
					<input
						id="confirm"
						type={showConfirm ? 'text' : 'password'}
						{...register('confirm', { required: '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å', validate: value => value === password || '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å' })}
					/>
					<button
						type="button"
						onClick={() => setShowConfirm(v => !v)}
						className={styles.eyeButton}
						aria-label={showConfirm ? '–°—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å' : '–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å'}
					>
						{showConfirm ? 'üôà' : 'üëÅÔ∏è'}
					</button>
				</div>
				{errors.confirm && <span className={common.error}>{errors.confirm.message}</span>}
			</div>

			<button className={common.button} type="submit">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</button>
		</form>
	);
};

export default RegisterForm; 	